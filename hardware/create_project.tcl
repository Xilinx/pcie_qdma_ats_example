#
# Copyright (C) 2021 Xilinx, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may
# not use this file except in compliance with the License. A copy of the
# License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Generated by Vivado tools


#*****************************************************************************************
# Vivado (TM) v2020.2.1 (64-bit)
#
# qdma_v4_ats_ex.tcl: Tcl script for re-creating project 'qdma_v4_ats_ex'
#
# Generated by Vivado on Thu Apr 08 13:10:09 PDT 2021
# IP Build 3080454 on Sat Dec 12 02:19:03 MST 2020
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (qdma_v4_ats_ex.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "src/design_1_wrapper.v"
#    "src/qdma_stm_defines.svh"
#    "src/xilinx_pcie_qdma_ref_board.xdc"
#    "src/design_1_wrapper_sim.v"
#    "src/pcie_4_c_rp.v"
#    "src/sys_clk_gen.v"
#    "src/sys_clk_gen_ds.v"
#    "src/board_common.vh"
#    "src/usp_pci_exp_usrapp_cfg.v"
#    "src/pci_exp_expect_tasks.vh"
#    "src/usp_pci_exp_usrapp_com.v"
#    "src/usp_pci_exp_usrapp_rx.v"
#    "src/sample_tests.vh"
#    "src/tests.vh"
#    "src/usp_pci_exp_usrapp_tx.v"
#    "src/xilinx_pcie_uscale_rp.v"
#    "src/xp4c_usp_smsw_model_core_top.v"
#    "src/board.v"
#    "src/xil_sig2pipe.v"
#    "src/sample_tests_sriov.vh"
#    "src/usp_pci_exp_usrapp_tx_sriov.sv"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************


# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "qdma_v4_ats_ex"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "qdma_v4_ats_ex_take2.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"


# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xcu280-fsvh2892-2L-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:au280:part0:1.1" -objects $obj
set_property -name "compxlib.vcs_compiled_library_dir" -value "/group/xrlabs2/markp/vcs_2020_2_1_sim_lib" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "au280" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_simulator" -value "VCS" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "53" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "53" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "53" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "53" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "53" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "53" -objects $obj
set_property -name "webtalk.vcs_launch_sim" -value "166" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "53" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/../ip_repo"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/../src/design_1_wrapper.v"]\
 [file normalize "${origin_dir}/../src/qdma_stm_defines.svh"]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "src/qdma_stm_defines.svh"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${origin_dir}/../src/xilinx_pcie_qdma_ref_board.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "src/xilinx_pcie_qdma_ref_board.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_constrs_file" -value "$proj_dir/${_xil_proj_name_}.srcs/constrs_1/imports/src/xilinx_pcie_qdma_ref_board.xdc" -objects $obj
set_property -name "target_ucf" -value "$proj_dir/${_xil_proj_name_}.srcs/constrs_1/imports/src/xilinx_pcie_qdma_ref_board.xdc" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/../src/design_1_wrapper_sim.v"]\
 [file normalize "${origin_dir}/../src/pcie_4_c_rp.v"]\
 [file normalize "${origin_dir}/../src/sys_clk_gen.v"]\
 [file normalize "${origin_dir}/../src/sys_clk_gen_ds.v"]\
 [file normalize "${origin_dir}/../src/board_common.vh"]\
 [file normalize "${origin_dir}/../src/usp_pci_exp_usrapp_cfg.v"]\
 [file normalize "${origin_dir}/../src/pci_exp_expect_tasks.vh"]\
 [file normalize "${origin_dir}/../src/usp_pci_exp_usrapp_com.v"]\
 [file normalize "${origin_dir}/../src/usp_pci_exp_usrapp_rx.v"]\
 [file normalize "${origin_dir}/../src/sample_tests.vh"]\
 [file normalize "${origin_dir}/../src/tests.vh"]\
 [file normalize "${origin_dir}/../src/usp_pci_exp_usrapp_tx.v"]\
 [file normalize "${origin_dir}/../src/xilinx_pcie_uscale_rp.v"]\
 [file normalize "${origin_dir}/../src/xp4c_usp_smsw_model_core_top.v"]\
 [file normalize "${origin_dir}/../src/board.v"]\
 [file normalize "${origin_dir}/../src/xil_sig2pipe.v"]\
 [file normalize "${origin_dir}/../src/sample_tests_sriov.vh"]\
 [file normalize "${origin_dir}/../src/usp_pci_exp_usrapp_tx_sriov.sv"]\

]
set imported_files [import_files -fileset sim_1 $files]

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
set file "src/pcie_4_c_rp.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/sys_clk_gen.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/sys_clk_gen_ds.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/board_common.vh"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/usp_pci_exp_usrapp_cfg.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/pci_exp_expect_tasks.vh"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/usp_pci_exp_usrapp_com.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/usp_pci_exp_usrapp_rx.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/sample_tests.vh"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/tests.vh"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/usp_pci_exp_usrapp_tx.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/xilinx_pcie_uscale_rp.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/xp4c_usp_smsw_model_core_top.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/board.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/xil_sig2pipe.v"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/sample_tests_sriov.vh"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj
set_property -name "used_in" -value "simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj

set file "src/usp_pci_exp_usrapp_tx_sriov.sv"
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj
set_property -name "used_in" -value "implementation simulation" -objects $file_obj
set_property -name "used_in_synthesis" -value "0" -objects $file_obj


# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "hbs.configure_design_for_hier_access" -value "1" -objects $obj
set_property -name "top" -value "board" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added


# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:axi_timer:2.0\
  xilinx.com:ip:axi_uartlite:2.0\
  user.org:user:c2h_shim_layer:1.0\
  user.org:user:h2c_shim_layer:1.0\
  xilinx.com:ip:mdm:3.2\
  xilinx.com:ip:microblaze:11.0\
  xilinx.com:ip:qdma:4.0\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:smartconnect:1.0\
  xilinx.com:ip:xlconstant:1.1\
  xilinx.com:ip:util_ds_buf:2.1\
  xilinx.com:ip:lmb_bram_if_cntlr:4.0\
  xilinx.com:ip:lmb_v10:3.0\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: microblaze_0_local_memory
proc create_hier_cell_microblaze_0_local_memory { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_microblaze_0_local_memory() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 DLMB

  create_bd_intf_pin -mode MirroredMaster -vlnv xilinx.com:interface:lmb_rtl:1.0 ILMB


  # Create pins
  create_bd_pin -dir I -type clk LMB_Clk
  create_bd_pin -dir I -type rst SYS_Rst

  # Create instance: dlmb_bram_if_cntlr, and set properties
  set dlmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 dlmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $dlmb_bram_if_cntlr

  # Create instance: dlmb_v10, and set properties
  set dlmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 dlmb_v10 ]

  # Create instance: ilmb_bram_if_cntlr, and set properties
  set ilmb_bram_if_cntlr [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_bram_if_cntlr:4.0 ilmb_bram_if_cntlr ]
  set_property -dict [ list \
   CONFIG.C_ECC {0} \
 ] $ilmb_bram_if_cntlr

  # Create instance: ilmb_v10, and set properties
  set ilmb_v10 [ create_bd_cell -type ip -vlnv xilinx.com:ip:lmb_v10:3.0 ilmb_v10 ]

  # Create instance: lmb_bram, and set properties
  set lmb_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 lmb_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
   CONFIG.use_bram_block {BRAM_Controller} \
 ] $lmb_bram

  # Create interface connections
  connect_bd_intf_net -intf_net microblaze_0_dlmb [get_bd_intf_pins DLMB] [get_bd_intf_pins dlmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_bus [get_bd_intf_pins dlmb_bram_if_cntlr/SLMB] [get_bd_intf_pins dlmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_cntlr [get_bd_intf_pins dlmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net microblaze_0_ilmb [get_bd_intf_pins ILMB] [get_bd_intf_pins ilmb_v10/LMB_M]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_bus [get_bd_intf_pins ilmb_bram_if_cntlr/SLMB] [get_bd_intf_pins ilmb_v10/LMB_Sl_0]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_cntlr [get_bd_intf_pins ilmb_bram_if_cntlr/BRAM_PORT] [get_bd_intf_pins lmb_bram/BRAM_PORTB]

  # Create port connections
  connect_bd_net -net SYS_Rst_1 [get_bd_pins SYS_Rst] [get_bd_pins dlmb_bram_if_cntlr/LMB_Rst] [get_bd_pins dlmb_v10/SYS_Rst] [get_bd_pins ilmb_bram_if_cntlr/LMB_Rst] [get_bd_pins ilmb_v10/SYS_Rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins LMB_Clk] [get_bd_pins dlmb_bram_if_cntlr/LMB_Clk] [get_bd_pins dlmb_v10/LMB_Clk] [get_bd_pins ilmb_bram_if_cntlr/LMB_Clk] [get_bd_pins ilmb_v10/LMB_Clk]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set pci_express_x8 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pci_express_x8 ]

  set pcie_ext_pipe_ep_usp_0 [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:pcie_ext_pipe_rtl:1.0 pcie_ext_pipe_ep_usp_0 ]

  set pcie_refclk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_refclk ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {100000000} \
   ] $pcie_refclk

  set rs232_uart [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:uart_rtl:1.0 rs232_uart ]


  # Create ports
  set disable_hbm_cattrip [ create_bd_port -dir O -from 0 -to 0 disable_hbm_cattrip ]
  set pcie_perstn [ create_bd_port -dir I -type rst pcie_perstn ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] $pcie_perstn

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]

  # Create instance: axi_bram_ctrl_0_bram, and set properties
  set axi_bram_ctrl_0_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 axi_bram_ctrl_0_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
 ] $axi_bram_ctrl_0_bram

  # Create instance: axi_bram_ctrl_1, and set properties
  set axi_bram_ctrl_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_1 ]
  set_property -dict [ list \
   CONFIG.DATA_WIDTH {256} \
   CONFIG.ECC_TYPE {0} \
 ] $axi_bram_ctrl_1

  # Create instance: axi_bram_ctrl_1_bram, and set properties
  set axi_bram_ctrl_1_bram [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 axi_bram_ctrl_1_bram ]
  set_property -dict [ list \
   CONFIG.Memory_Type {True_Dual_Port_RAM} \
 ] $axi_bram_ctrl_1_bram

  # Create instance: axi_timer_0, and set properties
  set axi_timer_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_timer:2.0 axi_timer_0 ]

  # Create instance: axi_uartlite_0, and set properties
  set axi_uartlite_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_uartlite:2.0 axi_uartlite_0 ]
  set_property -dict [ list \
   CONFIG.C_BAUDRATE {115200} \
   CONFIG.C_S_AXI_ACLK_FREQ_HZ {250000000} \
   CONFIG.UARTLITE_BOARD_INTERFACE {rs232_uart} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $axi_uartlite_0

  # Create instance: c2h_shim_layer_0, and set properties
  set c2h_shim_layer_0 [ create_bd_cell -type ip -vlnv user.org:user:c2h_shim_layer:1.0 c2h_shim_layer_0 ]

  # Create instance: h2c_shim_layer_0, and set properties
  set h2c_shim_layer_0 [ create_bd_cell -type ip -vlnv user.org:user:h2c_shim_layer:1.0 h2c_shim_layer_0 ]

  # Create instance: mdm_1, and set properties
  set mdm_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:mdm:3.2 mdm_1 ]

  # Create instance: microblaze_0, and set properties
  set microblaze_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:microblaze:11.0 microblaze_0 ]
  set_property -dict [ list \
   CONFIG.C_DEBUG_ENABLED {1} \
   CONFIG.C_D_AXI {1} \
   CONFIG.C_D_LMB {1} \
   CONFIG.C_I_LMB {1} \
 ] $microblaze_0

  # Create instance: microblaze_0_local_memory
  create_hier_cell_microblaze_0_local_memory [current_bd_instance .] microblaze_0_local_memory

  # Create instance: qdma_0, and set properties
  set qdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:qdma:4.0 qdma_0 ]
  set_property -dict [ list \
   CONFIG.PF0_SRIOV_FIRST_VF_OFFSET {1} \
   CONFIG.PF0_SRIOV_VF_DEVICE_ID {A038} \
   CONFIG.PF1_INTERRUPT_PIN {INTA} \
   CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {000} \
   CONFIG.PF1_SRIOV_FIRST_VF_OFFSET {4} \
   CONFIG.PF1_SRIOV_VF_DEVICE_ID {A138} \
   CONFIG.PF2_INTERRUPT_PIN {INTA} \
   CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {000} \
   CONFIG.PF2_SRIOV_FIRST_VF_OFFSET {7} \
   CONFIG.PF2_SRIOV_VF_DEVICE_ID {A238} \
   CONFIG.PF3_INTERRUPT_PIN {INTA} \
   CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {000} \
   CONFIG.PF3_SRIOV_FIRST_VF_OFFSET {10} \
   CONFIG.PF3_SRIOV_VF_DEVICE_ID {A338} \
   CONFIG.axi_data_width {256_bit} \
   CONFIG.axisten_if_enable_msg_route {3FFFF} \
   CONFIG.csr_axilite_slave {true} \
   CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal} \
   CONFIG.en_bridge {true} \
   CONFIG.enable_at_ports {true} \
   CONFIG.mode_selection {Advanced} \
   CONFIG.pf0_ats_enabled {true} \
   CONFIG.pf0_device_id {9038} \
   CONFIG.pf0_msix_cap_pba_offset {00010050} \
   CONFIG.pf0_msix_cap_table_offset {00010040} \
   CONFIG.pf0_pciebar2axibar_2 {0x00000000C0000000} \
   CONFIG.pf1_msix_enabled_qdma {false} \
   CONFIG.pf2_device_id {9238} \
   CONFIG.pf2_msix_enabled_qdma {false} \
   CONFIG.pf3_device_id {9338} \
   CONFIG.pf3_msix_enabled_qdma {false} \
   CONFIG.pipe_sim {true} \
   CONFIG.pl_link_cap_max_link_width {X8} \
 ] $qdma_0

  # Create instance: rst_qdma_0_250M, and set properties
  set rst_qdma_0_250M [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 rst_qdma_0_250M ]

  # Create instance: smartconnect_0, and set properties
  set smartconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect:1.0 smartconnect_0 ]
  set_property -dict [ list \
   CONFIG.NUM_MI {6} \
   CONFIG.NUM_SI {2} \
 ] $smartconnect_0

  # Create instance: tie_off_no_wr_bk_mkr, and set properties
  set tie_off_no_wr_bk_mkr [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 tie_off_no_wr_bk_mkr ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $tie_off_no_wr_bk_mkr

  # Create instance: util_ds_buf, and set properties
  set util_ds_buf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.1 util_ds_buf ]
  set_property -dict [ list \
   CONFIG.C_BUF_TYPE {IBUFDSGTE} \
   CONFIG.DIFF_CLK_IN_BOARD_INTERFACE {pcie_refclk} \
   CONFIG.USE_BOARD_FLOW {true} \
 ] $util_ds_buf

  # Create instance: xlconstant_0, and set properties
  set xlconstant_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_0 ]

  # Create instance: xlconstant_1, and set properties
  set xlconstant_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 xlconstant_1 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {0} \
 ] $xlconstant_1

  # Create interface connections
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTA] [get_bd_intf_pins axi_bram_ctrl_0_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_bram_ctrl_0_BRAM_PORTB [get_bd_intf_pins axi_bram_ctrl_0/BRAM_PORTB] [get_bd_intf_pins axi_bram_ctrl_0_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTA [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTA] [get_bd_intf_pins axi_bram_ctrl_1_bram/BRAM_PORTA]
  connect_bd_intf_net -intf_net axi_bram_ctrl_1_BRAM_PORTB [get_bd_intf_pins axi_bram_ctrl_1/BRAM_PORTB] [get_bd_intf_pins axi_bram_ctrl_1_bram/BRAM_PORTB]
  connect_bd_intf_net -intf_net axi_uartlite_0_UART [get_bd_intf_ports rs232_uart] [get_bd_intf_pins axi_uartlite_0/UART]
  connect_bd_intf_net -intf_net microblaze_0_M_AXI_DP [get_bd_intf_pins microblaze_0/M_AXI_DP] [get_bd_intf_pins smartconnect_0/S00_AXI]
  connect_bd_intf_net -intf_net microblaze_0_debug [get_bd_intf_pins mdm_1/MBDEBUG_0] [get_bd_intf_pins microblaze_0/DEBUG]
  connect_bd_intf_net -intf_net microblaze_0_dlmb_1 [get_bd_intf_pins microblaze_0/DLMB] [get_bd_intf_pins microblaze_0_local_memory/DLMB]
  connect_bd_intf_net -intf_net microblaze_0_ilmb_1 [get_bd_intf_pins microblaze_0/ILMB] [get_bd_intf_pins microblaze_0_local_memory/ILMB]
  connect_bd_intf_net -intf_net pcie_ext_pipe_ep_usp_0_1 [get_bd_intf_ports pcie_ext_pipe_ep_usp_0] [get_bd_intf_pins qdma_0/pcie_ext_pipe_ep_usp]
  connect_bd_intf_net -intf_net pcie_refclk_1 [get_bd_intf_ports pcie_refclk] [get_bd_intf_pins util_ds_buf/CLK_IN_D]
  connect_bd_intf_net -intf_net qdma_0_M_AXI [get_bd_intf_pins axi_bram_ctrl_1/S_AXI] [get_bd_intf_pins qdma_0/M_AXI]
  connect_bd_intf_net -intf_net qdma_0_M_AXI_LITE [get_bd_intf_pins qdma_0/M_AXI_LITE] [get_bd_intf_pins smartconnect_0/S01_AXI]
  connect_bd_intf_net -intf_net qdma_0_pcie_mgt [get_bd_intf_ports pci_express_x8] [get_bd_intf_pins qdma_0/pcie_mgt]
  connect_bd_intf_net -intf_net smartconnect_0_M00_AXI [get_bd_intf_pins h2c_shim_layer_0/S00_AXI] [get_bd_intf_pins smartconnect_0/M00_AXI]
  connect_bd_intf_net -intf_net smartconnect_0_M01_AXI [get_bd_intf_pins axi_bram_ctrl_0/S_AXI] [get_bd_intf_pins smartconnect_0/M01_AXI]
  connect_bd_intf_net -intf_net smartconnect_0_M02_AXI [get_bd_intf_pins qdma_0/S_AXI_LITE_CSR] [get_bd_intf_pins smartconnect_0/M02_AXI]
  connect_bd_intf_net -intf_net smartconnect_0_M03_AXI [get_bd_intf_pins axi_uartlite_0/S_AXI] [get_bd_intf_pins smartconnect_0/M03_AXI]
  connect_bd_intf_net -intf_net smartconnect_0_M04_AXI [get_bd_intf_pins c2h_shim_layer_0/S00_AXI] [get_bd_intf_pins smartconnect_0/M04_AXI]
  connect_bd_intf_net -intf_net smartconnect_0_M05_AXI [get_bd_intf_pins axi_timer_0/S_AXI] [get_bd_intf_pins smartconnect_0/M05_AXI]

  # Create port connections
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_at [get_bd_pins c2h_shim_layer_0/c2h_byp_in_at] [get_bd_pins qdma_0/c2h_byp_in_mm_at] [get_bd_pins qdma_0/c2h_byp_in_st_csh_at]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_error [get_bd_pins c2h_shim_layer_0/c2h_byp_in_error] [get_bd_pins qdma_0/c2h_byp_in_mm_error] [get_bd_pins qdma_0/c2h_byp_in_st_csh_error]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_func [get_bd_pins c2h_shim_layer_0/c2h_byp_in_func] [get_bd_pins qdma_0/c2h_byp_in_mm_func] [get_bd_pins qdma_0/c2h_byp_in_st_csh_func]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_cidx [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_cidx] [get_bd_pins qdma_0/c2h_byp_in_mm_cidx]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_len [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_len] [get_bd_pins qdma_0/c2h_byp_in_mm_len]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_mrkr_req [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_mrkr_req] [get_bd_pins qdma_0/c2h_byp_in_mm_mrkr_req]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_no_dma [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_no_dma] [get_bd_pins qdma_0/c2h_byp_in_mm_no_dma]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_sdi [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_sdi] [get_bd_pins qdma_0/c2h_byp_in_mm_sdi]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_mm_vld [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_vld] [get_bd_pins qdma_0/c2h_byp_in_mm_vld]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_port_id [get_bd_pins c2h_shim_layer_0/c2h_byp_in_port_id] [get_bd_pins qdma_0/c2h_byp_in_mm_port_id] [get_bd_pins qdma_0/c2h_byp_in_st_csh_port_id]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_qid [get_bd_pins c2h_shim_layer_0/c2h_byp_in_qid] [get_bd_pins qdma_0/c2h_byp_in_mm_qid] [get_bd_pins qdma_0/c2h_byp_in_st_csh_qid]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_raddr [get_bd_pins c2h_shim_layer_0/c2h_byp_in_raddr] [get_bd_pins qdma_0/c2h_byp_in_mm_radr]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_st_pfch_tag [get_bd_pins c2h_shim_layer_0/c2h_byp_in_st_pfch_tag] [get_bd_pins qdma_0/c2h_byp_in_st_csh_pfch_tag]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_st_vld [get_bd_pins c2h_shim_layer_0/c2h_byp_in_st_vld] [get_bd_pins qdma_0/c2h_byp_in_st_csh_vld]
  connect_bd_net -net c2h_shim_layer_0_c2h_byp_in_waddr [get_bd_pins c2h_shim_layer_0/c2h_byp_in_waddr] [get_bd_pins qdma_0/c2h_byp_in_mm_wadr] [get_bd_pins qdma_0/c2h_byp_in_st_csh_addr]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_cmpty_type [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_cmpty_type] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_cmpt_type]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_col_idx [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_col_idx] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_col_idx]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_err_idx [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_err_idx] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_err_idx]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_marker [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_marker] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_marker]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_port_id [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_port_id] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_port_id]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_qid [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_qid] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_qid]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_ctrl_user_trig [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_ctrl_user_trig] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_user_trig]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_dpar [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_dpar] [get_bd_pins qdma_0/s_axis_c2h_cmpt_dpar]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_size [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_size] [get_bd_pins qdma_0/s_axis_c2h_cmpt_size]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_tdata [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_tdata] [get_bd_pins qdma_0/s_axis_c2h_cmpt_tdata]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_tvalid [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_tvalid] [get_bd_pins qdma_0/s_axis_c2h_cmpt_tvalid]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_cmpt_wait_pld_pkt_id [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_wait_pld_pkt_id] [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_wait_pld_pkt_id]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_ecc [get_bd_pins c2h_shim_layer_0/m_axis_c2h_ecc] [get_bd_pins qdma_0/s_axis_c2h_ctrl_ecc]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_has_cmpt [get_bd_pins c2h_shim_layer_0/m_axis_c2h_has_cmpt] [get_bd_pins qdma_0/s_axis_c2h_ctrl_has_cmpt]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_len [get_bd_pins c2h_shim_layer_0/m_axis_c2h_len] [get_bd_pins qdma_0/s_axis_c2h_ctrl_len]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_marker [get_bd_pins c2h_shim_layer_0/m_axis_c2h_marker] [get_bd_pins qdma_0/s_axis_c2h_ctrl_marker]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_mty [get_bd_pins c2h_shim_layer_0/m_axis_c2h_mty] [get_bd_pins qdma_0/s_axis_c2h_mty]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_port_id [get_bd_pins c2h_shim_layer_0/m_axis_c2h_port_id] [get_bd_pins qdma_0/s_axis_c2h_ctrl_port_id]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_qid [get_bd_pins c2h_shim_layer_0/m_axis_c2h_qid] [get_bd_pins qdma_0/s_axis_c2h_ctrl_qid]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_tcrc [get_bd_pins c2h_shim_layer_0/m_axis_c2h_tcrc] [get_bd_pins qdma_0/s_axis_c2h_tcrc]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_tdata [get_bd_pins c2h_shim_layer_0/m_axis_c2h_tdata] [get_bd_pins qdma_0/s_axis_c2h_tdata]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_tlast [get_bd_pins c2h_shim_layer_0/m_axis_c2h_tlast] [get_bd_pins qdma_0/s_axis_c2h_tlast]
  connect_bd_net -net c2h_shim_layer_0_m_axis_c2h_tvalid [get_bd_pins c2h_shim_layer_0/m_axis_c2h_tvalid] [get_bd_pins qdma_0/s_axis_c2h_tvalid]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_at [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_at] [get_bd_pins qdma_0/h2c_byp_in_mm_at] [get_bd_pins qdma_0/h2c_byp_in_st_at]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_cidx [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_cidx] [get_bd_pins qdma_0/h2c_byp_in_mm_cidx] [get_bd_pins qdma_0/h2c_byp_in_st_cidx]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_eop [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_eop] [get_bd_pins qdma_0/h2c_byp_in_st_eop]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_error [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_error] [get_bd_pins qdma_0/h2c_byp_in_mm_error] [get_bd_pins qdma_0/h2c_byp_in_st_error]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_func [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_func] [get_bd_pins qdma_0/h2c_byp_in_mm_func] [get_bd_pins qdma_0/h2c_byp_in_st_func]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_len [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_len] [get_bd_pins qdma_0/h2c_byp_in_mm_len] [get_bd_pins qdma_0/h2c_byp_in_st_len]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_mm_vld [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_mm_vld] [get_bd_pins qdma_0/h2c_byp_in_mm_vld]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_mrkr_req [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_mrkr_req] [get_bd_pins qdma_0/h2c_byp_in_mm_mrkr_req] [get_bd_pins qdma_0/h2c_byp_in_st_mrkr_req]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_no_dma [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_no_dma] [get_bd_pins qdma_0/h2c_byp_in_mm_no_dma] [get_bd_pins qdma_0/h2c_byp_in_st_no_dma]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_port_id [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_port_id] [get_bd_pins qdma_0/h2c_byp_in_mm_port_id] [get_bd_pins qdma_0/h2c_byp_in_st_port_id]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_qid [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_qid] [get_bd_pins qdma_0/h2c_byp_in_mm_qid] [get_bd_pins qdma_0/h2c_byp_in_st_qid]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_raddr [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_raddr] [get_bd_pins qdma_0/h2c_byp_in_mm_radr] [get_bd_pins qdma_0/h2c_byp_in_st_addr]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_sdi [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_sdi] [get_bd_pins qdma_0/h2c_byp_in_mm_sdi] [get_bd_pins qdma_0/h2c_byp_in_st_sdi]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_sop [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_sop] [get_bd_pins qdma_0/h2c_byp_in_st_sop]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_st_vld [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_st_vld] [get_bd_pins qdma_0/h2c_byp_in_st_vld]
  connect_bd_net -net h2c_shim_layer_0_m_h2c_byp_in_waddr [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_waddr] [get_bd_pins qdma_0/h2c_byp_in_mm_wadr]
  connect_bd_net -net h2c_shim_layer_0_s_axis_h2c_tready [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tready] [get_bd_pins qdma_0/m_axis_h2c_tready]
  connect_bd_net -net mdm_1_debug_sys_rst [get_bd_pins mdm_1/Debug_SYS_Rst] [get_bd_pins rst_qdma_0_250M/mb_debug_sys_rst]
  connect_bd_net -net microblaze_0_Clk [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins axi_bram_ctrl_1/s_axi_aclk] [get_bd_pins axi_timer_0/s_axi_aclk] [get_bd_pins axi_uartlite_0/s_axi_aclk] [get_bd_pins c2h_shim_layer_0/aclk] [get_bd_pins h2c_shim_layer_0/clk] [get_bd_pins microblaze_0/Clk] [get_bd_pins microblaze_0_local_memory/LMB_Clk] [get_bd_pins qdma_0/axi_aclk] [get_bd_pins rst_qdma_0_250M/slowest_sync_clk] [get_bd_pins smartconnect_0/aclk]
  connect_bd_net -net pcie_perstn_1 [get_bd_ports pcie_perstn] [get_bd_pins qdma_0/sys_rst_n]
  connect_bd_net -net qdma_0_axi_aresetn [get_bd_pins axi_bram_ctrl_1/s_axi_aresetn] [get_bd_pins axi_timer_0/s_axi_aresetn] [get_bd_pins axi_uartlite_0/s_axi_aresetn] [get_bd_pins c2h_shim_layer_0/aresetn] [get_bd_pins h2c_shim_layer_0/aresetn] [get_bd_pins qdma_0/axi_aresetn] [get_bd_pins rst_qdma_0_250M/ext_reset_in]
  connect_bd_net -net qdma_0_c2h_byp_in_mm_rdy [get_bd_pins c2h_shim_layer_0/c2h_byp_in_mm_rdy] [get_bd_pins qdma_0/c2h_byp_in_mm_rdy]
  connect_bd_net -net qdma_0_c2h_byp_in_st_csh_rdy [get_bd_pins c2h_shim_layer_0/c2h_byp_in_st_rdy] [get_bd_pins qdma_0/c2h_byp_in_st_csh_rdy]
  connect_bd_net -net qdma_0_h2c_byp_in_mm_rdy [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_mm_rdy] [get_bd_pins qdma_0/h2c_byp_in_mm_rdy]
  connect_bd_net -net qdma_0_h2c_byp_in_st_rdy [get_bd_pins h2c_shim_layer_0/m_h2c_byp_in_st_rdy] [get_bd_pins qdma_0/h2c_byp_in_st_rdy]
  connect_bd_net -net qdma_0_m_axis_h2c_tcrc [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_crc] [get_bd_pins qdma_0/m_axis_h2c_tcrc]
  connect_bd_net -net qdma_0_m_axis_h2c_tdata [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tdata] [get_bd_pins qdma_0/m_axis_h2c_tdata]
  connect_bd_net -net qdma_0_m_axis_h2c_tlast [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tlast] [get_bd_pins qdma_0/m_axis_h2c_tlast]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_err [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_err] [get_bd_pins qdma_0/m_axis_h2c_tuser_err]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_mdata [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_mdata] [get_bd_pins qdma_0/m_axis_h2c_tuser_mdata]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_mty [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_mty] [get_bd_pins qdma_0/m_axis_h2c_tuser_mty]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_port_id [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_port_id] [get_bd_pins qdma_0/m_axis_h2c_tuser_port_id]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_qid [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_qid] [get_bd_pins qdma_0/m_axis_h2c_tuser_qid]
  connect_bd_net -net qdma_0_m_axis_h2c_tuser_zero_byte [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tuser_zerobyte] [get_bd_pins qdma_0/m_axis_h2c_tuser_zero_byte]
  connect_bd_net -net qdma_0_m_axis_h2c_tvalid [get_bd_pins h2c_shim_layer_0/s_axis_h2c_tvalid] [get_bd_pins qdma_0/m_axis_h2c_tvalid]
  connect_bd_net -net qdma_0_s_axis_c2h_cmpt_tready [get_bd_pins c2h_shim_layer_0/m_axis_c2h_cmpt_tready] [get_bd_pins qdma_0/s_axis_c2h_cmpt_tready]
  connect_bd_net -net qdma_0_s_axis_c2h_tready [get_bd_pins c2h_shim_layer_0/m_axis_c2h_tready] [get_bd_pins qdma_0/s_axis_c2h_tready]
  connect_bd_net -net rst_qdma_0_250M_bus_struct_reset [get_bd_pins microblaze_0_local_memory/SYS_Rst] [get_bd_pins rst_qdma_0_250M/bus_struct_reset]
  connect_bd_net -net rst_qdma_0_250M_interconnect_aresetn [get_bd_pins rst_qdma_0_250M/interconnect_aresetn] [get_bd_pins smartconnect_0/aresetn]
  connect_bd_net -net rst_qdma_0_250M_mb_reset [get_bd_pins microblaze_0/Reset] [get_bd_pins rst_qdma_0_250M/mb_reset]
  connect_bd_net -net rst_qdma_0_250M_peripheral_aresetn [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn] [get_bd_pins rst_qdma_0_250M/peripheral_aresetn]
  connect_bd_net -net tie_off_no_wr_bk_mkr_dout [get_bd_pins qdma_0/s_axis_c2h_cmpt_ctrl_no_wrb_marker] [get_bd_pins tie_off_no_wr_bk_mkr/dout]
  connect_bd_net -net util_ds_buf_IBUF_DS_ODIV2 [get_bd_pins qdma_0/sys_clk] [get_bd_pins util_ds_buf/IBUF_DS_ODIV2]
  connect_bd_net -net util_ds_buf_IBUF_OUT [get_bd_pins qdma_0/sys_clk_gt] [get_bd_pins util_ds_buf/IBUF_OUT]
  connect_bd_net -net xlconstant_0_dout [get_bd_pins qdma_0/tm_dsc_sts_rdy] [get_bd_pins xlconstant_0/dout]
  connect_bd_net -net xlconstant_1_dout [get_bd_ports disable_hbm_cattrip] [get_bd_pins xlconstant_1/dout]

  # Create address segments
  assign_bd_address -offset 0xC0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0x41C00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_timer_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x40600000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs axi_uartlite_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x44A10000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs c2h_shim_layer_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x00000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs microblaze_0_local_memory/dlmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x44A00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs h2c_shim_layer_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x00000000 -range 0x00010000 -target_address_space [get_bd_addr_spaces microblaze_0/Instruction] [get_bd_addr_segs microblaze_0_local_memory/ilmb_bram_if_cntlr/SLMB/Mem] -force
  assign_bd_address -offset 0x10000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces microblaze_0/Data] [get_bd_addr_segs qdma_0/S_AXI_LITE_CSR/CTL0] -force
  assign_bd_address -offset 0xC0000000 -range 0x00002000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs axi_bram_ctrl_0/S_AXI/Mem0] -force
  assign_bd_address -offset 0xC2000000 -range 0x00080000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI] [get_bd_addr_segs axi_bram_ctrl_1/S_AXI/Mem0] -force
  assign_bd_address -offset 0x41C00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs axi_timer_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x40600000 -range 0x00010000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs axi_uartlite_0/S_AXI/Reg] -force
  assign_bd_address -offset 0x44A10000 -range 0x00010000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs c2h_shim_layer_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x44A00000 -range 0x00010000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs h2c_shim_layer_0/S00_AXI/S00_AXI_reg] -force
  assign_bd_address -offset 0x10000000 -range 0x10000000 -target_address_space [get_bd_addr_spaces qdma_0/M_AXI_LITE] [get_bd_addr_segs qdma_0/S_AXI_LITE_CSR/CTL0] -force


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_design_1()
cr_bd_design_1 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_1.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Synthesis 2020} -strategy "Flow_PerfOptimized_high" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Flow_PerfOptimized_high" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2020" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "auto_incremental_checkpoint.directory" -value "/group/xrlabs2/markp/qdma_v4_ats_2020_2_sndbox/qdma_v4_ats_ex/qdma_v4_ats_ex.srcs/utils_1/imports/synth_1" -objects $obj
set_property -name "strategy" -value "Flow_PerfOptimized_high" -objects $obj
set_property -name "steps.synth_design.args.directive" -value "PerformanceOptimized" -objects $obj
set_property -name "steps.synth_design.args.fsm_extraction" -value "one_hot" -objects $obj
set_property -name "steps.synth_design.args.keep_equivalent_registers" -value "1" -objects $obj
set_property -name "steps.synth_design.args.resource_sharing" -value "off" -objects $obj
set_property -name "steps.synth_design.args.no_lc" -value "1" -objects $obj
set_property -name "steps.synth_design.args.shreg_min_size" -value "5" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xcu280-fsvh2892-2L-e -flow {Vivado Implementation 2020} -strategy "Performance_Explore" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Performance_Explore" [get_runs impl_1]
  set_property flow "Vivado Implementation 2020" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "auto_incremental_checkpoint.directory" -value "/group/xrlabs2/markp/qdma_v4_ats_2020_2_sndbox/qdma_v4_ats_ex/qdma_v4_ats_ex.srcs/utils_1/imports/impl_1" -objects $obj
set_property -name "strategy" -value "Performance_Explore" -objects $obj
set_property -name "steps.opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.place_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.phys_opt_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.route_design.args.directive" -value "Explore" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
